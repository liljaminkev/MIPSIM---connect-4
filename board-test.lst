    1                  		.data
    2 10010000 20202020	gridDisplay: .ascii "    _________________________\n"
    3 1001001e 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
    4 1001003c 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
    5 1001005a 20202020	 .ascii	"    |___|___|___|___|___|___|\n"
    6 10010078 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
    7 10010096 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
    8 100100b4 20202020	 .ascii	"    |___|___|___|___|___|___|\n"
    9 100100d2 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
   10 100100f0 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
   11 1001010e 20202020	 .ascii	"    |___|___|___|___|___|___|\n"
   12 1001012c 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
   13 1001014a 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
   14 10010168 20202020	 .asciiz	"    |___|___|___|___|___|___|\n"
   15                   
   16 10010187 52455355	uwin: .asciiz "USER WINS!!"
   17 10010193 504d4f43	cwin: .asciiz	"COMPUTER WINS!!"
   18 100101a3 44495247	tie: .asciiz	"GRID IS FULL. TIE!! "
   19                   
   20 100101b8 0020	blankChar:	.asciiz	" "
   21 100101ba 004f	playerChar:	.asciiz "O"
   22 100101bc 0058	compChar:	.asciiz "X"
   23                   
   24 100101be 706d6f43	compInput:	.asciiz "Computer chooses col "
   25 100101d4         	grid: .space 24		# begins at an address that's a multiple of 4
   26 100101ec 74616854	colFull:	.asciiz "That col is full - please pick another spot: "
   27 1001021a 61656c50	inputPrompt:	.asciiz "Please pick a col (1-6): "						
   28 10010234 59414c50	againMsg:	.asciiz	"PLAY AGAIN (Nonzero=YES, 0=NO)? "
   29 10010255 434c4557	welcome:	.asciiz	"WELCOME TO THE MIPSYM VERSION OF CONNECT-4!"
   30 10010281 20202020	clear_prompt:	.asciiz "                                                 "
   31                  		.code
   32 00400000         		.globl main
   33                   main:
   34                   #	jal	resetdisplay		# clear the console
   35 00400000 0c10000d		jal	initialize_grid
   36 00400004 0c100018		jal	print_game
   37 00400008 0c100039	1:	jal	select_col_user
   38 0040000c 0c100078		jal	drop_piece
   39 00400010 0c100018		jal	print_game
   40 00400014 0c100062		jal	computerInput
   41 00400018 0c100078		jal	drop_piece
   42 0040001c 0c100018		jal	print_game
   43 00400020 0401fff9		b	1b
   44 00400024 0000028c		syscall	$exit
   45                   	
   46                   resetdisplay:
   47                   # function code implementation
   48 00400028 2004002e		addi	$a0,$0,'.		# clear screen character
   49 0040002c 000002cc		syscall	$print_char
   50 00400030 03e00008		jr	$ra
   51                   
   52                   ##################################################
   53                   # function loads grid and sets all values to space
   54                   ##################################################
   55                   initialize_grid:
   56                  		la	$t0,grid	#t0 = grid array
   56 00400034 3c081001		lui	$t0,0x1001
   56 00400038 350801d4		ori	$t0,$t0,0x1D4
   57                  		la	$t2,blankChar	#load ascii 0
   57 0040003c 3c0a1001		lui	$t2,0x1001
   57 00400040 354a01b8		ori	$t2,$t2,0x1B8
   58 00400044 20090018		addi	$t1,$0,24	#counter
   59                   
   60                   #set arr to 0
   61 00400048 814b0000		lb	$t3,($t2)		#x = '0'
   62 0040004c a10b0000	1:	sb	$t3,($t0)		#store in to board
   63 00400050 21080001		addi	$t0,$t0,1
   64 00400054 2129ffff		addi	$t1,$t1,-1
   65 00400058 1d20fffc		bgtz	$t1,1b
   66                   
   67                   #print array
   68                   #	la	$a0,grid
   69                   #	syscall	$print_string
   70                   	
   71 0040005c 03e00008		jr	$ra
   72                   
   73                   
   74                   
   75                   ###############################################################################
   76                   # void print_game(void)
   77                   #
   78                   ###############################################################################
   79                   # Description: 
   80                   # This function prints a 4 row-by-6 column grid onto the console. The grid lines
   81                   # are comprised of underscore characters separating the rows, and the vertical
   82                   # bar (ASCII byte 0x7C) separating the columns. Each grid cell has a height of
   83                   # 3 spaces in the vertical direction, and 3 spaces in the horizontal direction.
   84                   # The vertical bars forming the vertical boundaries of cells must be separated 4 spaces 
   85                   # from each one another. The underscore characters forming the horizontal boundaries
   86                   # of the cells must be separated by 3 rows from one another.
   87                    
   88                   # The contents within each grid cell is stored in a 24-byte "grid" byte array. If
   89                   # a particular element of the "grid" array contains a value of 0, then the corresponding 
   90                   # grid cell is empty, and nothing is visually written into each cell. If an element
   91                   # contains a value of 1, then an "O" is placed in the center of a grid cell. If an 
   92                   # element contains a value of 2, then an "X" is placed in the center of the grid cell.
   93                   
   94                   ###############################################################################
   95                   #  Register usage: <list any t0-t9 registers used by the function>
   96                   ###############################################################################
   97                   
   98                   print_game:
   99 00400060 20040000		addi	$a0,$0,0	#set x = 0
  100 00400064 20050000		addi	$a1,$0,0	#set y = 0
  101 00400068 0000050c		syscall	$xy		#set cursor at 0,0
  102                  		la	$a0,gridDisplay	#a0 = gridDisplay
  102 0040006c 3c041001		lui	$a0,0x1001
  102 00400070 34840000		ori	$a0,$a0,0x00
  103 00400074 0000010c		syscall	$print_string	#print gridDisplay
  104                   	
  105 00400078 20040023		addi	$a0,$0,35	#set x at 35
  106 0040007c 20050005		addi	$a1,$0,5	#set y at 5
  107 00400080 0000050c		syscall	$xy		#set cursor at 35,5
  108                   	
  109                  		la	$a0,welcome
  109 00400084 3c041001		lui	$a0,0x1001
  109 00400088 34840255		ori	$a0,$a0,0x255
  110 0040008c 0000010c		syscall	$print_string	#print message
  111                   
  112                   
  113                   # loop through grid array to place Os and Xs onto the console
  114                  		la	$t0,grid	#load grid array t0
  114 00400090 3c081001		lui	$t0,0x1001
  114 00400094 350801d4		ori	$t0,$t0,0x1D4
  115 00400098 20090006		addi	$t1,$0,6	#Col counter = 6
  116 0040009c 200c0004		addi	$t4,$0,4	#row counter = 4
  117 004000a0 200a0006		addi	$t2,$0,6	#x pos
  118 004000a4 200b0002		addi	$t3,$0,2	#y pos
  119                   
  120                   1:	
  121 004000a8 01402020	2:	add	$a0,$t2,$0	#load x
  122 004000ac 01602820		add	$a1,$t3,$0	#load y
  123 004000b0 0000050c		syscall $xy		#move cursor
  124 004000b4 81040000		lb	$a0,($t0)	#get piece from arr
  125 004000b8 000002cc		syscall	$print_char	#print game piece
  126 004000bc 214a0004		addi	$t2,$t2,4	#inc x by 4
  127 004000c0 21080001		addi	$t0,$t0,1	#inc arr pointer
  128 004000c4 2129ffff		addi	$t1,$t1,-1	#dec col counter
  129                   	
  130 004000c8 1d20fff7		bgtz	$t1,2b		#while col not 0
  131                   	
  132 004000cc 216b0003		addi	$t3,$t3,3	#inc row pos by 3
  133 004000d0 200a0006		addi	$t2,$0,6	#reset col pos back to 6
  134 004000d4 20090006		addi	$t1,$0,6	#add 6 back to row counter
  135 004000d8 218cffff		addi	$t4,$t4,-1	#dec row counter
  136 004000dc 1d80fff2		bgtz	$t4,1b		#while row not 0
  137 004000e0 03e00008		jr	$ra
  138                   
  139                   #######################################
  140                   #prompt user to enter a number from 1-6 
  141                   #prompt is printer on line 14
  142                   #######################################
  143                   select_col_user:
  144                  		la	$t0,grid	#grid
  144 004000e4 3c081001		lui	$t0,0x1001
  144 004000e8 350801d4		ori	$t0,$t0,0x1D4
  145 004000ec 20090001		addi	$t1,$0,1	#min
  146 004000f0 200a0006		addi	$t2,$0,6	#max
  147 004000f4 00006820		add	$t5,$0,$0
  148                   
  149                   #move cursor
  150 004000f8 00002020	1:	add 	$a0,$0,$0
  151 004000fc 2005000e		addi 	$a1,$0,14
  152 00400100 0000050c		syscall	$xy
  153                   
  154                  		la 	$a0,clear_prompt
  154 00400104 3c041001		lui	$a0,0x1001
  154 00400108 34840281		ori	$a0,$a0,0x281
  155 0040010c 0000010c		syscall	$print_string
  156                   
  157 00400110 00002020		add 	$a0,$0,$0
  158 00400114 0000050c		syscall	$xy
  159                   
  160                   #prompt
  161                  		la	$a0,inputPrompt
  161 00400118 3c041001		lui	$a0,0x1001
  161 0040011c 3484021a		ori	$a0,$a0,0x21A
  162 00400120 0000010c		syscall $print_string
  163 00400124 0000014c	2:	syscall $read_int
  164                  		bgt	$v0,$t2,1b
  164 00400128 0142082a		slt	$at,$t2,$v0
  164 0040012c 1420fff2		bne	$at,$0,1b
  165 00400130 1840fff1		blez	$v0,1b
  166                   
  167                   #check spot
  168 00400134 01024020		add	$t0,$t0,$v0
  169 00400138 810b0000		lb	$t3,($t0)
  170                  		la	$t4,blankChar
  170 0040013c 3c0c1001		lui	$t4,0x1001
  170 00400140 358c01b8		ori	$t4,$t4,0x1B8
  171 00400144 818c0000		lb	$t4,($t4)
  172 00400148 158b0003		bne	$t4,$t3,3f
  173 0040014c 2044ffff		addi	$a0,$v0,-1
  174 00400150 00002820		add	$a1,$0,$0
  175 00400154 03e00008		jr	$ra
  176                   
  177 00400158 00002020	3:	add 	$a0,$0,$0
  178 0040015c 2005000e		addi 	$a1,$0,14
  179 00400160 0000050c		syscall	$xy
  180                  		la 	$a0,clear_prompt
  180 00400164 3c041001		lui	$a0,0x1001
  180 00400168 34840281		ori	$a0,$a0,0x281
  181 0040016c 0000010c		syscall	$print_string
  182 00400170 00002020		add 	$a0,$0,$0
  183 00400174 0000050c		syscall	$xy
  184                  		la	$a0,colFull
  184 00400178 3c041001		lui	$a0,0x1001
  184 0040017c 348401ec		ori	$a0,$a0,0x1EC
  185 00400180 0000010c		syscall	$print_string
  186 00400184 0401ffe7		b	2b
  187                   
  188                   ########################################
  189                   #computer picks a number for col 1-6
  190                   ########################################
  191                   computerInput:
  192                  		la	$t1,grid
  192 00400188 3c091001		lui	$t1,0x1001
  192 0040018c 352901d4		ori	$t1,$t1,0x1D4
  193 00400190 00002020		add 	$a0,$0,$0
  194 00400194 2005000e		addi 	$a1,$0,14
  195 00400198 0000050c		syscall	$xy
  196                  		la 	$a0,clear_prompt
  196 0040019c 3c041001		lui	$a0,0x1001
  196 004001a0 34840281		ori	$a0,$a0,0x281
  197 004001a4 0000010c		syscall	$print_string
  198                   
  199 004001a8 00002020		add 	$a0,$0,$0
  200 004001ac 0000050c		syscall	$xy
  201                   	
  202 004001b0 20080007		addi	$t0,$0,7
  203                  		la	$a0,compInput
  203 004001b4 3c041001		lui	$a0,0x1001
  203 004001b8 348401be		ori	$a0,$a0,0x1BE
  204 004001bc 0000010c	1:	syscall $print_string
  205 004001c0 000006cc		syscall $random
  206 004001c4 00482024		and	$a0,$v0,$t0
  207 004001c8 1104fffc		beq	$t0,$a0,1b
  208 004001cc 1080fffb		beqz	$a0,1b
  209 004001d0 0000004c		syscall	$print_int
  210 004001d4 20050001		addi	$a1,$0,1
  211 004001d8 2084ffff		addi	$a0,$a0,-1
  212 004001dc 03e00008		jr	$ra
  213                   
  214                   #place piece in array
  215                   drop_piece:
  216                  		la	$t0,grid
  216 004001e0 3c081001		lui	$t0,0x1001
  216 004001e4 350801d4		ori	$t0,$t0,0x1D4
  217                  		la	$t3,blankChar
  217 004001e8 3c0b1001		lui	$t3,0x1001
  217 004001ec 356b01b8		ori	$t3,$t3,0x1B8
  218 004001f0 816b0000		lb	$t3,($t3)
  219 004001f4 1ca00003		bgtz	$a1,1f
  220                  		la	$t1,playerChar
  220 004001f8 3c091001		lui	$t1,0x1001
  220 004001fc 352901ba		ori	$t1,$t1,0x1BA
  221 00400200 04010002		b	2f
  222                   
  223                  	1:	la	$t1,compChar
  223 00400204 3c091001		lui	$t1,0x1001
  223 00400208 352901bc		ori	$t1,$t1,0x1BC
  224                   
  225 0040020c 81290000	2:	lb	$t1,($t1)
  226 00400210 20840012		addi	$a0,$a0,18
  227 00400214 01044020		add	$t0,$t0,$a0
  228 00400218 810a0000	3:	lb	$t2,($t0)
  229 0040021c 156a0002		bne	$t3,$t2,4f
  230                   
  231 00400220 a1090000		sb	$t1,($t0)
  232 00400224 03e00008		jr	$ra
  233                   
  234 00400228 2084fffa	4:	addi	$a0,$a0,-6
  235                  		la	$t0,grid
  235 0040022c 3c081001		lui	$t0,0x1001
  235 00400230 350801d4		ori	$t0,$t0,0x1D4
  236 00400234 01044020		add	$t0,$t0,$a0
  237 00400238 0401fff7		b	3b
  238                   
                 	