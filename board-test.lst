    1                  		.data
    2 10010000 20202020	gridDisplay: .ascii "    _________________________\n"
    3 1001001e 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
    4 1001003c 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
    5 1001005a 20202020	 .ascii	"    |___|___|___|___|___|___|\n"
    6 10010078 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
    7 10010096 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
    8 100100b4 20202020	 .ascii	"    |___|___|___|___|___|___|\n"
    9 100100d2 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
   10 100100f0 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
   11 1001010e 20202020	 .ascii	"    |___|___|___|___|___|___|\n"
   12 1001012c 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
   13 1001014a 20202020	 .ascii	"    |   |   |   |   |   |   |\n"
   14 10010168 20202020	 .asciiz	"    |___|___|___|___|___|___|\n"
   15                   
   16 10010187 52455355	uwin: .asciiz "USER WINS!!"
   17 10010193 504d4f43	cwin: .asciiz	"COMPUTER WINS!!"
   18 100101a3 44495247	tie: .asciiz	"GRID IS FULL. TIE!! "
   19                   
   20 100101b8 0020	blankChar:	.asciiz	" "
   21 100101ba 004f	playerChar:	.asciiz "O"
   22 100101bc 0058	compChar:	.asciiz "X"
   23                   
   24 100101be 706d6f43	compInput:	.asciiz "Computer chooses col "
   25 100101d4         	grid: .space 24		# begins at an address that's a multiple of 4
   26 100101ec 74616854	colFull:	.asciiz "That col is full - please pick another spot: "
   27 1001021a 61656c50	inputPrompt:	.asciiz "Please pick a number 1-6: "						
   28 10010235 59414c50	againMsg:	.asciiz	"PLAY AGAIN (Nonzero=YES, 0=NO)? "
   29 10010256 434c4557	welcome:	.asciiz	"WELCOME TO THE MIPSYM VERSION OF CONNECT-4!"
   30 10010282 20202020	clear_prompt:	.asciiz "                                               "
   31                  		.code
   32 00400000         		.globl main
   33                   main:
   34                   #	jal	resetdisplay		# clear the console
   35 00400000 0c100008		jal	initialize_grid
   36 00400004 0c100013		jal	print_game
   37 00400008 0c100034		jal	userInput
   38 0040000c 0c10003c		jal	computerInput
   39 00400010 0000028c		syscall	$exit
   40                   	
   41                   resetdisplay:
   42                   # function code implementation
   43 00400014 2004002e		addi	$a0,$0,'.		# clear screen character
   44 00400018 000002cc		syscall	$print_char
   45 0040001c 03e00008		jr	$ra
   46                   
   47                   ##################################################
   48                   # function loads grid and sets all values to space
   49                   ##################################################
   50                   initialize_grid:
   51                  		la	$t0,grid	#t0 = grid array
   51 00400020 3c081001		lui	$t0,0x1001
   51 00400024 350801d4		ori	$t0,$t0,0x1D4
   52                  		la	$t2,blankChar	#load ascii 0
   52 00400028 3c0a1001		lui	$t2,0x1001
   52 0040002c 354a01b8		ori	$t2,$t2,0x1B8
   53 00400030 20090018		addi	$t1,$0,24	#counter
   54                   
   55                   #set arr to 0
   56 00400034 814b0000		lb	$t3,($t2)		#x = '0'
   57 00400038 a10b0000	1:	sb	$t3,($t0)		#store in to board
   58 0040003c 21080001		addi	$t0,$t0,1
   59 00400040 2129ffff		addi	$t1,$t1,-1
   60 00400044 1d20fffc		bgtz	$t1,1b
   61                   
   62                   #print array
   63                   #	la	$a0,grid
   64                   #	syscall	$print_string
   65                   	
   66 00400048 03e00008		jr	$ra
   67                   
   68                   
   69                   
   70                   ###############################################################################
   71                   # void print_game(void)
   72                   #
   73                   ###############################################################################
   74                   # Description: 
   75                   # This function prints a 4 row-by-6 column grid onto the console. The grid lines
   76                   # are comprised of underscore characters separating the rows, and the vertical
   77                   # bar (ASCII byte 0x7C) separating the columns. Each grid cell has a height of
   78                   # 3 spaces in the vertical direction, and 3 spaces in the horizontal direction.
   79                   # The vertical bars forming the vertical boundaries of cells must be separated 4 spaces 
   80                   # from each one another. The underscore characters forming the horizontal boundaries
   81                   # of the cells must be separated by 3 rows from one another.
   82                    
   83                   # The contents within each grid cell is stored in a 24-byte "grid" byte array. If
   84                   # a particular element of the "grid" array contains a value of 0, then the corresponding 
   85                   # grid cell is empty, and nothing is visually written into each cell. If an element
   86                   # contains a value of 1, then an "O" is placed in the center of a grid cell. If an 
   87                   # element contains a value of 2, then an "X" is placed in the center of the grid cell.
   88                   
   89                   ###############################################################################
   90                   #  Register usage: <list any t0-t9 registers used by the function>
   91                   ###############################################################################
   92                   
   93                   print_game:
   94 0040004c 20040000		addi	$a0,$0,0	#set x = 0
   95 00400050 20050000		addi	$a1,$0,0	#set y = 0
   96 00400054 0000050c		syscall	$xy		#set cursor at 0,0
   97                  		la	$a0,gridDisplay	#a0 = gridDisplay
   97 00400058 3c041001		lui	$a0,0x1001
   97 0040005c 34840000		ori	$a0,$a0,0x00
   98 00400060 0000010c		syscall	$print_string	#print gridDisplay
   99                   	
  100 00400064 20040023		addi	$a0,$0,35	#set x at 35
  101 00400068 20050005		addi	$a1,$0,5	#set y at 5
  102 0040006c 0000050c		syscall	$xy		#set cursor at 35,5
  103                   	
  104                  		la	$a0,welcome
  104 00400070 3c041001		lui	$a0,0x1001
  104 00400074 34840256		ori	$a0,$a0,0x256
  105 00400078 0000010c		syscall	$print_string	#print message
  106                   
  107                   
  108                   # loop through grid array to place Os and Xs onto the console
  109                  		la	$t0,grid	#load grid array t0
  109 0040007c 3c081001		lui	$t0,0x1001
  109 00400080 350801d4		ori	$t0,$t0,0x1D4
  110 00400084 20090006		addi	$t1,$0,6	#Col counter = 6
  111 00400088 200c0004		addi	$t4,$0,4	#row counter = 4
  112 0040008c 200a0006		addi	$t2,$0,6	#x pos
  113 00400090 200b0002		addi	$t3,$0,2	#y pos
  114                   
  115                   1:	
  116 00400094 01402020	2:	add	$a0,$t2,$0	#load x
  117 00400098 01602820		add	$a1,$t3,$0	#load y
  118 0040009c 0000050c		syscall $xy		#move cursor
  119 004000a0 81040000		lb	$a0,($t0)	#get piece from arr
  120 004000a4 000002cc		syscall	$print_char	#print game piece
  121 004000a8 214a0004		addi	$t2,$t2,4	#inc x by 4
  122 004000ac 21080001		addi	$t0,$t0,1	#inc arr pointer
  123 004000b0 2129ffff		addi	$t1,$t1,-1	#dec col counter
  124                   	
  125 004000b4 1d20fff7		bgtz	$t1,2b		#while col not 0
  126                   	
  127 004000b8 216b0003		addi	$t3,$t3,3	#inc row pos by 3
  128 004000bc 200a0006		addi	$t2,$0,6	#reset col pos back to 6
  129 004000c0 20090006		addi	$t1,$0,6	#add 6 back to row counter
  130 004000c4 218cffff		addi	$t4,$t4,-1	#dec row counter
  131 004000c8 1d80fff2		bgtz	$t4,1b		#while row not 0
  132 004000cc 03e00008		jr	$ra
  133                   
  134                   #######################################
  135                   #prompt user to enter a number from 1-6 
  136                   #prompt is printer on line 14
  137                   #######################################
  138                   userInput:
  139 004000d0 00002020		add 	$a0,$0,$0
  140 004000d4 2005000e		addi 	$a1,$0,14
  141 004000d8 0000050c		syscall	$xy
  142                  		la	$a0,inputPrompt
  142 004000dc 3c041001		lui	$a0,0x1001
  142 004000e0 3484021a		ori	$a0,$a0,0x21A
  143 004000e4 0000010c		syscall $print_string
  144 004000e8 0000014c		syscall $read_int
  145 004000ec 03e00008		jr	$ra
  146                   
  147                   ########################################
  148                   #computer picks a number from col
  149                   ########################################
  150                   computerInput:
  151 004000f0 00002020		add 	$a0,$0,$0
  152 004000f4 2005000e		addi 	$a1,$0,14
  153 004000f8 0000050c		syscall	$xy
  154                  		la 	$a0,clear_prompt
  154 004000fc 3c041001		lui	$a0,0x1001
  154 00400100 34840282		ori	$a0,$a0,0x282
  155 00400104 0000010c		syscall	$print_string
  156                   
  157 00400108 00002020		add 	$a0,$0,$0
  158 0040010c 0000050c		syscall	$xy
  159                   	
  160 00400110 20080007		addi	$t0,$0,7
  161                  		la	$a0,compInput
  161 00400114 3c041001		lui	$a0,0x1001
  161 00400118 348401be		ori	$a0,$a0,0x1BE
  162 0040011c 0000010c	1:	syscall $print_string
  163 00400120 000006cc		syscall $random
  164 00400124 00482024		and	$a0,$v0,$t0
  165 00400128 1104fffc		beq	$t0,$a0,1b
  166 0040012c 1080fffb		beqz	$a0,1b
  167 00400130 0000004c		syscall	$print_int
  168 00400134 03e00008		jr	$ra
  169                   
                 	